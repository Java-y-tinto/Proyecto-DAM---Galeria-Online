# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-frontend:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]
  
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: build frontend
      working-directory: frontend
      run: npm run build
    
    - name: upload build
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: frontend/dist/

 
  build-middleware:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json
    - name: Install middleware dependencies
      working-directory: middleware
      run: npm ci

    - name: build middleware
      working-directory: middleware
      run: npm run compile

    - name: upload compiled middleware
      uses: actions/upload-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/dist/

  integration-test:
    runs-on: ubuntu-22.04
    needs: [build-middleware]
    env:
      # CORREGIDO: Usar el nombre correcto del secret
      JWT_SECRET: "174c7356d18aeea2b797abfc2cc9ca9feae90b91d4664c7786a22b0f2d0e2202ac2238c7261595a7c32f9a4da7bf0b645e1b6c15a96c0c037f0b25c60cd8167f9309f5889c8799f01c001202eaee161e474665e1d569d127b0ee61049c6a9b7695325172006149a950ef4e540d243096630869454a5bd4c9524bbac99b832b9d2094c3361cb602a2d90361827c5f6398aff28a13c4880ce5a9d53304775acc52fc7be759a5f539b2c5b3dcbe1d420fe5aefc523fcfb8895a2dbabab60051a736d3587253afe406460098a61386a96d789d64dd6c9bb5e8a5a87dde7e5634419faa0a61acfdacc077119454629bf371150e867e5d262ba1783f4f5541891a5b2d"
      JWT_EXPIRES_IN: "1h"
      PORT: 4000
      
      # Odoo variables - CORREGIDO: Usar contrase√±a para testing
      ODOO_BASE_URL: "http://localhost"
      ODOO_PORT: 8069
      ODOO_DB: "odoo_test"
      ODOO_USERNAME: "admin"
      ODOO_PASSWORD: "admin"
      # REMOVIDO: ODOO_API_KEY para usar password en testing
      NODE_ENV: "test"
      
    strategy:
      matrix:
        node-version: [22.x]
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json

    # üêò PASO 1: Setup Odoo
    - name: Install docker compose
      uses: docker/setup-compose-action@v1

    - name: Start Odoo with auto-initialization
      working-directory: backend
      run: docker compose up -d

    - name: Wait for Odoo to be fully ready
      run: |
        echo "‚è≥ Esperando que Odoo se inicialice completamente..."
        
        # Esperar a que PostgreSQL est√© listo
        timeout 120 bash -c 'until docker exec backend-db-1 pg_isready -U odoo > /dev/null 2>&1; do 
          echo "PostgreSQL inici√°ndose..."; 
          sleep 3; 
        done'
        echo "‚úÖ PostgreSQL listo!"
        
        # Esperar a que Odoo responda
        timeout 300 bash -c 'until curl -f "http://localhost:8069/" > /dev/null 2>&1; do 
          echo "Odoo a√∫n inicializ√°ndose..."; 
          sleep 10; 
        done'
        
        # NUEVO: Esperar a que la DB est√© completamente inicializada
        echo "‚è≥ Esperando inicializaci√≥n completa de la base de datos..."
        sleep 30
        
        echo "‚úÖ Odoo completamente listo!"
        echo "üåê URL: http://localhost:8069"

    - name: Verify Odoo setup and test authentication
      run: |
        echo "üß™ Verificando Odoo..."
        
        # Verificar conectividad b√°sica
        curl -f "http://localhost:8069/" && echo "‚úÖ Odoo responde"
        
        # NUEVO: Probar autenticaci√≥n con las credenciales
        echo "üîê Probando autenticaci√≥n Odoo..."
        AUTH_TEST=$(curl -s -X POST "http://localhost:8069/web/session/authenticate" \
          -H "Content-Type: application/json" \
          -d '{
            "params": {
              "db": "odoo_test",
              "login": "admin", 
              "password": "admin"
            }
          }')
        
        echo "Respuesta de autenticaci√≥n: $AUTH_TEST"
        
        # Verificar logs para ver si la DB se cre√≥
        echo "üìã √öltimos logs de Odoo:"
        docker logs backend-odoo-1 --tail 30

    # üîß PASO 2: Setup y test Middleware  
    - name: Download compiled middleware
      uses: actions/download-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/dist/

    - name: Install production dependencies
      working-directory: middleware
      run: npm ci --omit=dev

    - name: Debug environment variables
      run: |
        echo "üîç Variables de entorno del middleware:"
        echo "JWT_SECRET length: ${#JWT_SECRET}"
        echo "JWT_SECRET set: $([ -n "$JWT_SECRET" ] && echo 'YES' || echo 'NO')"
        echo "ODOO_BASE_URL: $ODOO_BASE_URL"
        echo "ODOO_PORT: $ODOO_PORT"
        echo "ODOO_DB: $ODOO_DB"
        echo "ODOO_USERNAME: $ODOO_USERNAME"
        echo "ODOO_PASSWORD set: $([ -n "$ODOO_PASSWORD" ] && echo 'YES' || echo 'NO')"
        echo "NODE_ENV: $NODE_ENV"

    - name: Start middleware
      working-directory: middleware
      run: |
        echo "üöÄ Iniciando middleware..."
        
        # CORREGIDO: Exportar todas las variables necesarias
        export JWT_SECRET="$JWT_SECRET"
        export JWT_EXPIRES_IN="$JWT_EXPIRES_IN"
        export PORT="$PORT"
        export ODOO_BASE_URL="$ODOO_BASE_URL"
        export ODOO_PORT="$ODOO_PORT"
        export ODOO_DB="$ODOO_DB"
        export ODOO_USERNAME="$ODOO_USERNAME"
        export ODOO_PASSWORD="$ODOO_PASSWORD"
        export NODE_ENV="$NODE_ENV"
        
        node ./dist/index.js &
        MIDDLEWARE_PID=$!
        echo "MIDDLEWARE_PID=$MIDDLEWARE_PID" >> $GITHUB_ENV
        
        # Esperar a que el middleware inicie
        timeout 60 bash -c 'until curl -f http://localhost:4000/health > /dev/null 2>&1; do 
          echo "Esperando middleware..."; 
          sleep 3; 
        done'
        echo "‚úÖ Middleware listo!"

    - name: Run integration tests
      run: |
        echo "üß™ Ejecutando tests de integraci√≥n..."
        
        # Test 1: Health check
        echo "1. Test health endpoint:"
        curl -f http://localhost:4000/health && echo "‚úÖ Health check OK"
        
        # Test 2: GraphQL endpoint b√°sico
        echo "2. Test GraphQL endpoint (productos):"
        GRAPHQL_RESPONSE=$(curl -s -X POST http://localhost:4000/graphql \
          -H "Content-Type: application/json" \
          -d '{"query": "{ products { id name } }"}')
        
        echo "GraphQL Response: $GRAPHQL_RESPONSE"
        
        if echo "$GRAPHQL_RESPONSE" | grep -q "data\|products"; then
          echo "‚úÖ GraphQL products test OK"
        else
          echo "‚ö†Ô∏è GraphQL returned unexpected response"
        fi
        
        # Test 3: GraphQL endpoint con autenticaci√≥n
        echo "3. Test GraphQL con autenticaci√≥n (registro):"
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:4000/graphql \
          -H "Content-Type: application/json" \
          -d '{
            "query": "mutation { registerUser(name: \"Test User\", email: \"test@test.com\", passwd: \"password123\") { success message token } }"
          }')
        
        echo "Register Response: $REGISTER_RESPONSE"
        
        if echo "$REGISTER_RESPONSE" | grep -q "success\|registerUser"; then
          echo "‚úÖ GraphQL auth test OK"
        else
          echo "‚ö†Ô∏è GraphQL auth test failed"
        fi

    - name: Show middleware logs on failure
      if: failure()
      run: |
        echo "üìã Logs del middleware (√∫ltimas 50 l√≠neas):"
        # Los logs del middleware deber√≠an estar en los logs del proceso
        ps aux | grep node || echo "No hay procesos node corriendo"
        
        echo "üìã Logs de Odoo (√∫ltimas 50 l√≠neas):"
        docker logs backend-odoo-1 --tail 50

    - name: Cleanup
      if: always()
      run: |
        # Detener middleware
        if [ ! -z "$MIDDLEWARE_PID" ]; then
          echo "üõë Deteniendo middleware..."
          kill $MIDDLEWARE_PID || true
        fi
        
        # Detener todos los procesos node relacionados
        pkill -f "node.*dist/index.js" || true
        
        # Detener Odoo
        echo "üõë Deteniendo Odoo..."
        docker compose down || true
      working-directory: backend

concurrency: 
  group: CI-${{ github.ref }}
  cancel-in-progress: true