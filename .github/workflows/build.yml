name: Node.js CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  NODE_VERSION: '20'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-middleware:
    name: üß™ Test Middleware + Odoo Integration
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json

    - name: üê≥ Setup Docker y Docker Compose
      run: |
        echo "üê≥ Verificando Docker..."
        docker --version
        docker-compose --version

    - name: üîß Configurar variables de entorno para testing
      run: |
        echo "üîß Creando archivo .env para testing..."
        cat > .env << 'EOF'
        # Configuraci√≥n para CI/Testing
        NODE_ENV=test
        CI=true
        
        # Odoo Configuration
        ODOO_BASE_URL=http://localhost
        ODOO_PORT=8069
        ODOO_DB=postgres
        ODOO_USERNAME=admin
        ODOO_PASSWORD=admin
        
        # JWT Configuration
        JWT_SECRET=test-jwt-secret-key-for-ci-testing-2024
        JWT_EXPIRES_IN=2h
        
        # Puerto del middleware
        PORT=4000
        EOF

    - name: üì¶ Instalar dependencias del middleware
      working-directory: ./middleware
      run: |
        echo "üì¶ Instalando dependencias del middleware..."
        npm ci

    - name: üî® Compilar TypeScript
      working-directory: ./middleware
      run: |
        echo "üî® Compilando TypeScript..."
        npm run compile

    - name: üöÄ Iniciar servicios con Docker Compose
      run: |
        echo "üöÄ Iniciando Odoo y PostgreSQL con Docker Compose..."
        docker-compose up -d db odoo
        
        echo "‚è≥ Esperando que PostgreSQL est√© listo..."
        timeout 60 bash -c 'until docker-compose exec -T db pg_isready -U odoo; do 
          echo "‚è≥ Esperando PostgreSQL... ($(date))"
          sleep 3
        done'
        
        echo "‚è≥ Esperando que Odoo est√© listo..."
        timeout 180 bash -c 'until curl -f http://localhost:8069/web/health > /dev/null 2>&1; do 
          echo "‚è≥ Esperando Odoo... ($(date))"
          sleep 5
        done'
        
        echo "‚úÖ Servicios iniciados correctamente"

    - name: üìã Mostrar logs de servicios
      if: always()
      run: |
        echo "üìã Logs de PostgreSQL:"
        docker-compose logs db | tail -20
        echo ""
        echo "üìã Logs de Odoo:"
        docker-compose logs odoo | tail -30

    - name: üîç Verificar conectividad con Odoo
      run: |
        echo "üîç Verificando conectividad con Odoo..."
        
        # Test b√°sico de conectividad
        curl -f http://localhost:8069/web/health
        
        # Test de conexi√≥n con GraphQL middleware usando JSON-RPC
        cat > test_odoo_connection.js << 'EOF'
        const axios = require('axios');
        
        async function testOdooConnection() {
          try {
            console.log("üîç Probando conexi√≥n con Odoo...");
            
            // Test b√°sico de health check
            const healthResponse = await axios.get('http://localhost:8069/web/health', {
              timeout: 10000
            });
            
            if (healthResponse.status === 200) {
              console.log("‚úÖ Odoo health check OK");
            }
            
            // Test de autenticaci√≥n mediante JSON-RPC
            console.log("üîê Probando autenticaci√≥n JSON-RPC...");
            const authResponse = await axios.post('http://localhost:8069/jsonrpc', {
              jsonrpc: '2.0',
              method: 'call',
              params: {
                service: 'common',
                method: 'authenticate',
                args: ['postgres', 'admin', 'admin', {}]
              },
              id: Math.floor(Math.random() * 1000000)
            }, {
              headers: { 'Content-Type': 'application/json' },
              timeout: 10000
            });
            
            const uid = authResponse.data.result;
            
            if (uid && uid > 0) {
              console.log(`‚úÖ Autenticaci√≥n JSON-RPC exitosa (UID: ${uid})`);
              
              // Test adicional: buscar productos usando JSON-RPC
              console.log("üì¶ Probando consulta de productos...");
              const productsResponse = await axios.post('http://localhost:8069/jsonrpc', {
                jsonrpc: '2.0',
                method: 'call',
                params: {
                  service: 'object',
                  method: 'execute_kw',
                  args: [
                    'postgres', uid, 'admin',
                    'product.product', 'search_count', [[]]
                  ]
                },
                id: Math.floor(Math.random() * 1000000)
              }, {
                headers: { 'Content-Type': 'application/json' },
                timeout: 10000
              });
              
              const productCount = productsResponse.data.result;
              console.log(`üì¶ Productos encontrados: ${productCount}`);
              
            } else {
              throw new Error('Fall√≥ la autenticaci√≥n con Odoo');
            }
            
          } catch (error) {
            console.error(`‚ùå Error conectando con Odoo: ${error.message}`);
            if (error.response) {
              console.error('Response data:', error.response.data);
            }
            process.exit(1);
          }
        }
        
        testOdooConnection();
        EOF
        
        # Instalar dependencias necesarias para el test
        npm install axios
        node test_odoo_connection.js

    - name: üé≠ Configurar datos de prueba en Odoo
      run: |
        echo "üé≠ Configurando datos de prueba en Odoo..."
        
        cat > setup_test_data.js << 'EOF'
        const axios = require('axios');
        
        const url = 'http://localhost:8069/jsonrpc';
        const db = 'postgres';
        const username = 'admin';
        const password = 'admin';
        
        // Helper function para hacer llamadas JSON-RPC
        async function callOdoo(service, method, args = []) {
          const response = await axios.post(url, {
            jsonrpc: '2.0',
            method: 'call',
            params: {
              service: service,
              method: method,
              args: args
            },
            id: Math.floor(Math.random() * 1000000)
          }, {
            headers: { 'Content-Type': 'application/json' },
            timeout: 30000
          });
          
          if (response.data.error) {
            throw new Error(`Odoo Error: ${JSON.stringify(response.data.error)}`);
          }
          
          return response.data.result;
        }
        
        async function setupTestData() {
          try {
            // Autenticar con Odoo
            console.log("üîê Autenticando con Odoo...");
            const uid = await callOdoo('common', 'authenticate', [db, username, password, {}]);
            
            if (!uid || uid <= 0) {
              throw new Error('Fall√≥ la autenticaci√≥n con Odoo');
            }
            
            console.log(`üë§ Conectado como UID: ${uid}`);
            
            // Helper para ejecutar m√©todos de modelo
            async function executeKw(model, method, args, kwargs = {}) {
              return await callOdoo('object', 'execute_kw', [
                db, uid, password, model, method, args, kwargs
              ]);
            }
            
            // Crear categor√≠as de productos
            console.log("üìÇ Creando categor√≠as de productos...");
            const categories = [
              'Cuadros Abstractos',
              'Paisajes', 
              'Retratos',
              'Bodegones',
              'Arte Moderno'
            ];
            
            const categoryIds = [];
            for (const catName of categories) {
              try {
                // Verificar si la categor√≠a ya existe
                const existingCats = await executeKw('product.category', 'search', [[['name', '=', catName]]]);
                
                let catId;
                if (existingCats.length > 0) {
                  catId = existingCats[0];
                  console.log(`‚ôªÔ∏è Categor√≠a existente: ${catName} (ID: ${catId})`);
                } else {
                  catId = await executeKw('product.category', 'create', [{ name: catName }]);
                  console.log(`‚úÖ Categor√≠a creada: ${catName} (ID: ${catId})`);
                }
                categoryIds.push(catId);
              } catch (error) {
                console.error(`‚ùå Error creando categor√≠a ${catName}:`, error.message);
              }
            }
            
            // Crear productos de prueba
            console.log("üé® Creando productos de prueba...");
            const productsData = [
              {
                name: 'Cuadro Abstracto Azul',
                list_price: 150.0,
                categ_id: categoryIds[0],
                x_featured: true,
                type: 'product',
                sale_ok: true,
              },
              {
                name: 'Paisaje Monta√±oso', 
                list_price: 200.0,
                categ_id: categoryIds[1],
                x_featured: false,
                type: 'product',
                sale_ok: true,
              },
              {
                name: 'Retrato Cl√°sico',
                list_price: 300.0,
                categ_id: categoryIds[2], 
                x_featured: true,
                type: 'product',
                sale_ok: true,
              },
              {
                name: 'Bodeg√≥n con Frutas',
                list_price: 120.0,
                categ_id: categoryIds[3],
                x_featured: false,
                type: 'product',
                sale_ok: true,
              },
              {
                name: 'Arte Moderno Contempor√°neo',
                list_price: 250.0,
                categ_id: categoryIds[4],
                x_featured: true,
                type: 'product',
                sale_ok: true,
              }
            ];
            
            for (const productData of productsData) {
              try {
                // Verificar si el producto ya existe
                const existingProducts = await executeKw('product.product', 'search', [
                  [['name', '=', productData.name]]
                ]);
                
                if (existingProducts.length > 0) {
                  console.log(`‚ôªÔ∏è Producto existente: ${productData.name} (ID: ${existingProducts[0]})`);
                } else {
                  const productId = await executeKw('product.product', 'create', [productData]);
                  console.log(`‚úÖ Producto creado: ${productData.name} (ID: ${productId})`);
                }
              } catch (error) {
                console.error(`‚ùå Error creando producto ${productData.name}:`, error.message);
              }
            }
            
            // Crear usuario de testing
            console.log("üë§ Creando usuario de testing...");
            try {
              // Verificar si el usuario ya existe
              const existingUsers = await executeKw('res.users', 'search', [
                [['login', '=', 'testapi@testing.com']]
              ]);
              
              if (existingUsers.length > 0) {
                console.log(`‚ôªÔ∏è Usuario de testing existente: ID ${existingUsers[0]}`);
              } else {
                const testUserId = await executeKw('res.users', 'create', [{
                  name: 'Test API User',
                  login: 'testapi@testing.com',
                  email: 'testapi@testing.com',
                  password: 'TestPassword123'
                }]);
                console.log(`‚úÖ Usuario de testing creado: ID ${testUserId}`);
              }
            } catch (error) {
              console.error("‚ùå Error creando usuario de testing:", error.message);
            }
            
            console.log("üéâ Configuraci√≥n de datos de prueba completada!");
            
          } catch (error) {
            console.error('‚ùå Error configurando datos de prueba:', error.message);
            if (error.response && error.response.data) {
              console.error('Response data:', JSON.stringify(error.response.data, null, 2));
            }
            process.exit(1);
          }
        }
        
        setupTestData();
        EOF
        
        node setup_test_data.js

    - name: üß™ Ejecutar tests de integraci√≥n
      working-directory: ./middleware
      timeout-minutes: 15
      env:
        NODE_ENV: test
        CI: true
        ODOO_BASE_URL: http://localhost
        ODOO_PORT: 8069
        ODOO_DB: postgres
        ODOO_USERNAME: admin
        ODOO_PASSWORD: admin
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-2024
        JWT_EXPIRES_IN: 2h
      run: |
        echo "üß™ Ejecutando tests de integraci√≥n del middleware..."
        echo "üîß Variables de entorno configuradas:"
        echo "   - NODE_ENV: $NODE_ENV"
        echo "   - ODOO_BASE_URL: $ODOO_BASE_URL"
        echo "   - ODOO_PORT: $ODOO_PORT" 
        echo "   - ODOO_DB: $ODOO_DB"
        echo "   - ODOO_USERNAME: $ODOO_USERNAME"
        
        npm run test

    - name: üìä Subir reporte de cobertura
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-middleware
        path: middleware/coverage/
        retention-days: 30

    - name: üìã Mostrar logs de servicios si hay fallos
      if: failure()
      run: |
        echo "üìã Logs de PostgreSQL:"
        docker-compose logs db
        echo ""
        echo "üìã Logs de Odoo:"
        docker-compose logs odoo

    - name: üßπ Limpiar servicios
      if: always()
      run: |
        echo "üßπ Limpiando servicios Docker..."
        docker-compose down -v
        docker system prune -f

  test-frontend:
    name: üé® Test Frontend Angular
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üì¶ Instalar dependencias del frontend
      working-directory: ./frontend
      run: |
        echo "üì¶ Instalando dependencias del frontend..."
        npm ci

    - name: üîç Lint del c√≥digo
      working-directory: ./frontend
      run: |
        echo "üîç Ejecutando lint..."
        npm run lint || echo "‚ö†Ô∏è Lint completado con warnings"

    - name: üî® Build de producci√≥n
      working-directory: ./frontend
      run: |
        echo "üî® Construyendo frontend para producci√≥n..."
        npm run build

    - name: üß™ Tests unitarios
      working-directory: ./frontend
      run: |
        echo "üß™ Ejecutando tests unitarios del frontend..."
        npm test -- --watch=false --browsers=ChromeHeadless --code-coverage || echo "‚ö†Ô∏è Tests completados"

    - name: üìä Subir artefactos del frontend
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30

  integration-e2e:
    name: üîó Tests E2E Integration
    runs-on: ubuntu-latest
    needs: [test-middleware, test-frontend]
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üê≥ Iniciar stack completo
      run: |
        echo "üê≥ Iniciando stack completo con Docker Compose..."
        docker-compose up -d
        
        echo "‚è≥ Esperando que todos los servicios est√©n listos..."
        timeout 300 bash -c 'until curl -f http://localhost:8069/web/health && curl -f http://localhost:4000/health && curl -f http://localhost:4200 > /dev/null 2>&1; do 
          echo "‚è≥ Esperando servicios... ($(date))"
          sleep 10
        done'

    - name: üîó Tests de integraci√≥n E2E
      run: |
        echo "üîó Ejecutando tests E2E reales..."
        
        # Test de conectividad frontend
        echo "‚úÖ Testing Frontend (puerto 4200)..."
        curl -f http://localhost:4200
        
        # Test de conectividad middleware
        echo "‚úÖ Testing Middleware GraphQL (puerto 4000)..."
        curl -f http://localhost:4000/health
        
        # Test de conectividad Odoo
        echo "‚úÖ Testing Odoo (puerto 8069)..."
        curl -f http://localhost:8069/web/health
        
        # Test de GraphQL endpoint
        echo "‚úÖ Testing GraphQL endpoint..."
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"query": "query { products { id name list_price } }"}' \
          http://localhost:4000/graphql
        
        echo "üéâ Tests E2E completados exitosamente"

    - name: üßπ Limpiar servicios E2E
      if: always()
      run: |
        echo "üßπ Limpiando servicios Docker..."
        docker-compose down -v

  build-production:
    name: üöÄ Build Production
    runs-on: ubuntu-latest
    needs: [test-middleware, test-frontend]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üèóÔ∏è Build middleware para producci√≥n
      working-directory: ./middleware
      run: |
        echo "üèóÔ∏è Construyendo middleware para producci√≥n..."
        npm ci --only=production
        npm run compile

    - name: üé® Build frontend para producci√≥n
      working-directory: ./frontend
      run: |
        echo "üé® Construyendo frontend para producci√≥n..."
        npm ci
        npm run build -- --configuration=production

    - name: üê≥ Build im√°genes Docker para producci√≥n
      run: |
        echo "üê≥ Construyendo im√°genes Docker..."
        docker-compose build --no-cache
        
        echo "üìù Listando im√°genes creadas..."
        docker images | grep galeria

    - name: üì¶ Crear artefactos de producci√≥n
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: |
          middleware/dist/
          frontend/dist/
          docker-compose.yml
          docker-compose.prod.yml
        retention-days: 90

    - name: üéâ Deployment preparado
      run: |
        echo "üéâ Build de producci√≥n completado exitosamente!"
        echo "üì¶ Artefactos listos para deployment"
        echo "üê≥ Im√°genes Docker construidas"
        echo "üöÄ El sistema est√° listo para ser desplegado"

  summary:
    name: üìã Resumen CI
    runs-on: ubuntu-latest
    needs: [test-middleware, test-frontend, build-production]
    if: always()
    
    steps:
    - name: üìã Mostrar resumen
      run: |
        echo "üéØ RESUMEN DEL CI PIPELINE"
        echo "========================"
        echo "‚úÖ Tests Middleware: ${{ needs.test-middleware.result }}"
        echo "‚úÖ Tests Frontend: ${{ needs.test-frontend.result }}"
        echo "‚úÖ Build Producci√≥n: ${{ needs.build-production.result }}"
        echo ""
        if [[ "${{ needs.test-middleware.result }}" == "success" && "${{ needs.test-frontend.result }}" == "success" ]]; then
          echo "üéâ ¬°CI PIPELINE COMPLETADO EXITOSAMENTE!"
          echo "üöÄ La Galer√≠a Online est√° lista para deployment"
        else
          echo "‚ùå CI Pipeline fall√≥. Revisar logs arriba."
          exit 1
        fi