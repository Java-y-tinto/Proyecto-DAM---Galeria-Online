name: Backend CI

on:
  push:
    branches:
      - main
      - master

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U odoo"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      odoo:
        image: odoo:18.0
        ports:
          - 8069:8069
        env:
          HOST: db
          USER: odoo
          PASSWORD: odoo
          # Odoo intentará conectarse a una base de datos 'odoo' por defecto.
          # Si quieres que se conecte a 'postgres' inicialmente, podrías añadir:
          # DB_NAME: postgres 
          # Pero para este flujo, no es estrictamente necesario ya que creamos 'odoo_test' explícitamente.
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mostrar contenedores en ejecución (depuración)
        run: docker ps -a

      - name: Instalar dependencias middleware
        working-directory: middleware 
        run: npm ci --omit=dev

      - name: Compilar middleware
        working-directory: middleware
        run: npm run compile

      - name: Verificar que Odoo está corriendo
        run: |
          echo "Esperando a que Odoo esté disponible en http://localhost:8069..."
          timeout 60s bash -c 'until curl -sf http://localhost:8069/web/health; do sleep 5; done'
          echo "Odoo está respondiendo."

      - name: Inicializar base de datos Odoo con datos demo
        env:
          ODOO_CONTAINER_ID: ${{ job.services.odoo.id }}
        run: |
          echo "ID del contenedor Odoo: $ODOO_CONTAINER_ID"
          
          # A continuación, se ejecuta el comando 'odoo' (odoo-bin) dentro del contenedor
          # para inicializar la base de datos 'odoo_test'.
          docker exec "$ODOO_CONTAINER_ID" odoo \
            -d odoo_test \
            -i base \
            --without-demo=False \
            --log-level=info \
            --db_host=db \
            --db_user=odoo \
            --db_password=odoo
            
          echo "Base de datos Odoo 'odoo_test' inicializada o la inicialización fue intentada."
          
      - name: Probar endpoint JSON-RPC de Odoo con curl
        run: |
          echo "Intentando listar bases de datos vía JSON-RPC (no requiere login)..."
          DB_LIST_RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"call","params":{"service":"db","method":"list_dbs"},"id":123}' \
            http://localhost:8069/jsonrpc)
          echo "Respuesta HTTP para list_dbs en /jsonrpc: $DB_LIST_RESPONSE_CODE"
          if [ "$DB_LIST_RESPONSE_CODE" -ne "200" ]; then
            echo "Error: El endpoint /jsonrpc no devolvió 200 para list_dbs. Cuerpo de la respuesta:"
            curl -i -X POST -H "Content-Type: application/json" \
              -d '{"jsonrpc":"2.0","method":"call","params":{"service":"db","method":"list_dbs"},"id":123}' \
              http://localhost:8069/jsonrpc
          else
            echo "Endpoint /jsonrpc parece funcionar para list_dbs."
          fi

      - name: crear archivo .env
        working-directory: middleware
        run: |
          cat <<EOF > .env
          ODOO_BASE_URL=http://localhost
          ODOO_PORT=8069
          ODOO_DB=odoo_test
          ODOO_USERNAME=admin
          ODOO_PASSWORD=admin
          NODE_ENV=test
          JWT_SECRET=tu_jwt_secret_aqui_para_ci # Asegúrate de añadir un JWT_SECRET
          EOF
          echo ".env file created in middleware directory"

      - name: Iniciar middleware en segundo plano # CAMBIO IMPORTANTE AQUÍ
        working-directory: middleware
        run: npm run start & # <--- Añade el "&" al final

      - name: Esperar a que el middleware se inicie # PASO NUEVO O VERIFICADO
        run: |
          echo "Esperando a que el middleware esté disponible en http://localhost:4000/health..."
          # El siguiente comando intentará conectar durante 60 segundos.
          # Si el middleware no responde a /health en ese tiempo, el comando fallará (exit 1),
          # y el workflow se detendrá, lo cual es correcto.
          timeout 60s bash -c 'until curl -sf http://localhost:4000/health; do echo "Intentando de nuevo en 5s..."; sleep 5; done'
          echo "✅ Middleware está respondiendo en http://localhost:4000/health"

      - name: Ejecutar setup
        working-directory: middleware
        env:
          MIDDLEWARE_URL: http://localhost:4000/graphql
        run: npm run setup:ci
        
    
          
      - name: Ejecutar test de integracion
        working-directory: middleware
        env:
          ODOO_BASE_URL: http://localhost
          ODOO_PORT: 8069
          ODOO_DB_NAME: odoo_test
          ODOO_USERNAME: admin
          ODOO_PASSWORD: admin

        run: npm run testIntegrations