# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-frontend:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]
  
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: build frontend
      working-directory: frontend
      run: npm run build
    
    - name: upload build
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: frontend/dist/

 
  build-middleware:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json
    - name: Install middleware dependencies
      working-directory: middleware
      run: npm ci

    - name: build middleware
      working-directory: middleware
      run: npm run compile

    - name: upload compiled middleware
      uses: actions/upload-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/dist/

  setup-odoo:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install docker compose
      uses: docker/setup-compose-action@v1

    - name: run odoo
      run: docker compose up -d
      working-directory: backend 
    
    
    - name: Wait for Odoo to be ready
      run: |
        echo "Waiting for Odoo to start..."
        timeout 300 bash -c 'until curl -f http://localhost:8069/web/health > /dev/null 2>&1; do sleep 5; done'
        echo "Odoo is ready!"

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        timeout 120 bash -c 'until docker exec $(docker ps -q --filter "name=postgres") pg_isready -U odoo > /dev/null 2>&1; do 
          echo "PostgreSQL still starting..."; 
          sleep 3; 
        done'
        echo "‚úÖ PostgreSQL is ready!"

    - name: Create test database using Odoo CLI
      run: |
        echo "üóÑÔ∏è Creating test database using Odoo CLI..."
        
        # Obtener el nombre del contenedor de Odoo
        ODOO_CONTAINER=$(docker ps --filter "name=odoo" --format "{{.Names}}" | head -1)
        echo "üì¶ Using Odoo container: $ODOO_CONTAINER"
        
        # Crear la base de datos directamente con Odoo CLI
        docker exec $ODOO_CONTAINER odoo \
          -d odoo_test \
          -i base \
          --stop-after-init \
          --without-demo=all \
          --log-level=info || echo "Database creation completed (exit code expected)"
        
        echo "‚úÖ Database 'odoo_test' initialized!"

    - name: Restart Odoo in normal mode
      run: |
        echo "üîÑ Restarting Odoo in normal mode..."
        
        # Parar Odoo temporalmente
        docker compose stop odoo
        working-directory: backend
        
        # Reiniciar en modo normal
        docker compose up -d odoo
        working-directory: backend
        
        echo "‚úÖ Odoo restarted in normal mode!"

    - name: Wait for Odoo web interface
      run: |
        echo "‚è≥ Waiting for Odoo web interface..."
        timeout 120 bash -c 'until curl -f "http://localhost:8069/web/login?db=odoo_test" > /dev/null 2>&1; do 
          echo "Web interface still loading..."; 
          sleep 5; 
        done'
        
        echo "‚úÖ Odoo web interface is ready!"
        echo "üåê URL: http://localhost:8069"
        echo "üóÑÔ∏è Database: odoo_test"
        echo "üîê Default credentials: admin / admin"

    - name: Verify database and user
      run: |
        echo "üß™ Verifying database and admin user..."
        
        ODOO_CONTAINER=$(docker ps --filter "name=odoo" --format "{{.Names}}" | head -1)
        
        # Verificar que la DB existe en PostgreSQL
        docker exec $(docker ps -q --filter "name=postgres") \
          psql -U odoo -d postgres -c "SELECT datname FROM pg_database WHERE datname='odoo_test';" | grep odoo_test
        
        # Verificar que el usuario admin existe
        docker exec $ODOO_CONTAINER odoo shell -d odoo_test <<EOF
        user = env['res.users'].search([('login', '=', 'admin')])
        if user:
          print(f"‚úÖ Admin user found: {user.name} ({user.login})")
          print(f"üìß Email: {user.email or 'No email set'}")
        else:
          print("‚ùå Admin user not found!")
        env.cr.commit()
        env.cr.quit()
        EOF
        
        echo "‚úÖ Database verification completed!"

  deploy-test-middleware:
    runs-on: ubuntu-22.04
    needs: [setup-odoo, build-middleware]
    env:
      JWT_SECRET: ${{secrets.JWT_SECRET_TEST}}
      JWT_EXPIRES_IN: "1h"
      PORT: 4000
      
      # Odoo variables
      ODOO_BASE_URL: "http://localhost"
      ODOO_PORT: 8069
      ODOO_DB: "odoo_test"
      ODOO_USERNAME: "admin"
      ODOO_PASSWORD: "admin"

      NODE_ENV: "CI"
    strategy:
      matrix:
        node-version: [22.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json

    - name: Download compiled middleware
      uses: actions/download-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/

    - name: Install production dependencies
      working-directory: middleware
      run: npm ci --omit=dev

    - name: start test middleware
      working-directory: middleware
      run: |
        node ./dist/index.js &
        MIDDLEWARE_PID=$!
        echo "MIDDLEWARE_PID=$MIDDLEWARE_PID" >> $GITHUB_ENV
        
        # Wait for middleware to start
        timeout 60 bash -c 'until curl -f http://localhost:4000/health > /dev/null 2>&1; do sleep 2; done'
        echo "Middleware is ready!"
    - name: run tests
      working-directory: middleware
      run: |
        curl -f http://localhost:4000/health && echo "Integration test passed"
      
    - name: Stop middleware
      if: always()
      working-directory: middleware
      run: |
        if [ ! -z "$MIDDLEWARE_PID" ]; then
          kill $MIDDLEWARE_PID || true
        fi

concurrency: 
  group: CI-${{ github.ref }}
  cancel-in-progress: true