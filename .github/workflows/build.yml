# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-frontend:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]
  
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: build frontend
      working-directory: frontend
      run: npm run build
    
    - name: upload build
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: frontend/dist/

 
  build-middleware:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json
    - name: Install middleware dependencies
      working-directory: middleware
      run: npm ci

    - name: build middleware
      working-directory: middleware
      run: npm run compile

    - name: upload compiled middleware
      uses: actions/upload-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/dist/

  setup-odoo:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install docker compose
      uses: docker/setup-compose-action@v1

    - name: Start Odoo with auto-initialization
      working-directory: backend
      run: docker compose up -d

    - name: Wait for Odoo to be fully ready
      run: |
        echo "‚è≥ Esperando que Odoo se inicialice completamente..."
        
        # Verificar que los contenedores est√©n corriendo
        timeout 60 bash -c 'until docker compose ps | grep -E "backend-(db|odoo)-1" | grep -v "Exit"; do 
          echo "Contenedores inici√°ndose..."; 
          docker compose ps;
          sleep 5; 
        done'
        
        # Esperar a que PostgreSQL est√© listo
        timeout 120 bash -c 'until docker exec backend-db-1 pg_isready -U odoo > /dev/null 2>&1; do 
          echo "PostgreSQL inici√°ndose..."; 
          sleep 3; 
        done'
        echo "‚úÖ PostgreSQL listo!"
        
        # Esperar a que Odoo responda en la web
        timeout 300 bash -c 'until curl -f "http://localhost:8069/web/login?db=odoo_test" > /dev/null 2>&1; do 
          echo "Odoo a√∫n inicializ√°ndose..."; 
          sleep 10; 
        done'
        
        echo "‚úÖ Odoo completamente listo!"
        echo "üåê URL: http://localhost:8069"
        echo "üóÑÔ∏è Base de datos: odoo_test"
        echo "üîê Credenciales: admin / admin"
      working-directory: backend

    - name: Verify setup
      run: |
        echo "üß™ Verificaci√≥n final..."
        
        # Verificar que la DB existe
        docker exec backend-db-1 psql -U odoo -d postgres -c "SELECT datname FROM pg_database WHERE datname='odoo_test';" | grep odoo_test
        echo "‚úÖ Base de datos verificada"
        
        # Verificar respuesta web
        curl -s "http://localhost:8069/web/login?db=odoo_test" | grep -q "odoo_test"
        echo "‚úÖ Interfaz web verificada"
        
        echo "üéØ Setup completado exitosamente!"

  deploy-test-middleware:
    runs-on: ubuntu-22.04
    needs: [setup-odoo, build-middleware]
    env:
      JWT_SECRET: ${{secrets.JWT_SECRET_TEST}}
      JWT_EXPIRES_IN: "1h"
      PORT: 4000
      
      # Odoo variables - CORREGIDAS
      ODOO_BASE_URL: "http://localhost"
      ODOO_PORT: 8069
      ODOO_DB: "odoo_test"
      ODOO_USERNAME: "admin"
      ODOO_PASSWORD: "admin"     # ‚úÖ Usar password en lugar de apiKey

      NODE_ENV: "test"           # ‚úÖ Cambiar de "CI" a "test"
    strategy:
      matrix:
        node-version: [22.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: middleware/package-lock.json

    - name: Download compiled middleware
      uses: actions/download-artifact@v4
      with:
        name: middleware-compiled
        path: middleware/dist/

    - name: Install production dependencies
      working-directory: middleware
      run: npm ci --omit=dev

    - name: Verify Odoo connection before starting middleware
      run: |
        echo "üîç Verificando conexi√≥n a Odoo..."
        curl -f "http://localhost:8069/web/login?db=odoo_test" || {
          echo "‚ùå Odoo no est√° disponible"
          exit 1
        }
        echo "‚úÖ Odoo est√° disponible"

    - name: start test middleware
      working-directory: middleware
      run: |
        echo "üöÄ Iniciando middleware..."
        node ./dist/index.js &
        MIDDLEWARE_PID=$!
        echo "MIDDLEWARE_PID=$MIDDLEWARE_PID" >> $GITHUB_ENV
        
        # Wait for middleware to start
        timeout 60 bash -c 'until curl -f http://localhost:4000/health > /dev/null 2>&1; do 
          echo "Esperando middleware..."; 
          sleep 3; 
        done'
        echo "‚úÖ Middleware listo!"
        
    - name: run integration tests
      working-directory: middleware
      run: |
        echo "üß™ Ejecutando tests de integraci√≥n..."
        
        # Test health endpoint
        curl -f http://localhost:4000/health && echo "‚úÖ Health check OK"
        
        # Test GraphQL endpoint
        curl -X POST http://localhost:4000/graphql \
          -H "Content-Type: application/json" \
          -d '{"query": "{ products { id name } }"}' \
          -f && echo "‚úÖ GraphQL test OK" || echo "‚ö†Ô∏è GraphQL test failed"
      
    - name: Stop middleware
      if: always()
      run: |
        if [ ! -z "$MIDDLEWARE_PID" ]; then
          echo "üõë Deteniendo middleware..."
          kill $MIDDLEWARE_PID || true
        fi

concurrency: 
  group: CI-${{ github.ref }}
  cancel-in-progress: true